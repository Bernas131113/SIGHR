@model IEnumerable<SIGHR.Models.ViewModels.FaltaComUserNameViewModel>

@{
    ViewData["Title"] = "Minhas Faltas Registadas";
    Layout = "_LayoutCollaborator"; // Usa o layout do colaborador
}

@section Styles {
    <style>
        /* Estilos adaptados da GestaoAdmin.cshtml para MinhasFaltas.cshtml */
        /* Idealmente, muitas dessas classes seriam globais no seu CSS principal (adminarea.css ou similar) */

        .content .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

            .content .header h1 {
                margin: 0;
                font-size: 1.8em;
            }

        /* Estilo para o botão "Registar Nova Falta" */
        .action-buttons-minhas-faltas .btn-registar {
            padding: 8px 15px;
            font-size: 0.9rem;
            border-radius: 4px; /* Consistente com outros botões */
            cursor: pointer;
            text-decoration: none;
            border: 1px solid transparent;
            color: white;
            background-color: #28a745; /* Verde (success) */
        }

            .action-buttons-minhas-faltas .btn-registar:hover {
                opacity: 0.85;
            }


        /* Estilos para a barra de filtro (se você decidir adicioná-la para "Minhas Faltas") */
        .search-bar-minhas-faltas {
            margin-bottom: 20px;
            margin-top: 15px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

            .search-bar-minhas-faltas .form-control-sm {
                padding: .35rem .6rem;
                font-size: .875rem;
                border-radius: .25rem;
                border: 1px solid #ced4da;
            }

            .search-bar-minhas-faltas .filter-btn {
                padding: 7px 12px;
                font-size: 0.9rem;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .search-bar-minhas-faltas .filter-btn.apply {
                    background-color: #0d6efd;
                }

                .search-bar-minhas-faltas .filter-btn.clear {
                    background-color: #6c757d;
                }


        .table-container {
            margin-top: 10px;
        }

        .table thead th {
            color: black; /* Letras pretas no cabeçalho */
            vertical-align: middle;
        }

        .table tbody td {
            vertical-align: middle;
        }

        .no-faltas-message {
            display: block;
            text-align: center;
            padding: 20px;
            font-style: italic;
            background-color: #f8f9fa;
            border: 1px solid #eee;
            border-radius: 5px;
            margin-top: 20px;
        }

        .alert-success {
            margin-bottom: 20px; /* Ajustado */
        }
    </style>
}

<div class="content">
    @* Usando a mesma classe de container principal *@
    <div class="header">
        <h1>@ViewData["Title"]</h1>
        <div class="action-buttons-minhas-faltas">
            @* Novo container para o botão *@
            <a asp-controller="Faltas" asp-action="Registar" class="btn-registar">Registar Nova Falta</a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    @* Barra de Filtros (Opcional para "Minhas Faltas", pode ser simplificada ou removida) *@
    @* Se você mantiver, o JavaScript para fazê-la funcionar precisaria ser diferente do admin,
       pois aqui a filtragem seria do lado do servidor ou recarregando a página com parâmetros.
       Para este exemplo, vou deixar a estrutura HTML mas sem a funcionalidade JS do admin. *@
    <div class="search-bar-minhas-faltas">
        <input type="date" id="filtro-data-minhasfaltas" class="form-control-sm" placeholder="Filtrar por data">
        <button class="filter-btn apply" onclick="alert('Filtragem para Minhas Faltas a ser implementada');">Filtrar</button>
        <button class="filter-btn clear" onclick="document.getElementById('filtro-data-minhasfaltas').value=''; alert('Filtro limpo. Recarregue ou implemente lógica.');">Limpar</button>
    </div>


    @if (Model == null || !Model.Any())
    {
        <div class="no-faltas-message">
            Você ainda não registou nenhuma falta.
        </div>
    }
    else
    {
        <div class="table-container">
            <table id="tabela-minhas-faltas" class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Data da Falta</th>
                        <th>Início</th>
                        <th>Fim</th>
                        <th>Motivo</th>
                        <th>Data do Registo</th>
                        @* Não precisa da coluna "Utilizador" aqui, pois são sempre as faltas do usuário logado *@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.DataFalta.ToString("dd/MM/yyyy")</td>
                            <td>@item.Inicio.ToString(@"hh\:mm")</td>
                            <td>@item.Fim.ToString(@"hh\:mm")</td>
                            <td>@Html.DisplayFor(modelItem => item.Motivo)</td>
                            <td>@item.DataRegisto.ToString("dd/MM/yyyy HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@* Não precisamos do section Scripts para carregar dados via API aqui,
   a menos que você adicione funcionalidades JavaScript interativas. *@