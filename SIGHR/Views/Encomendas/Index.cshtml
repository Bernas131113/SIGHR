@* Views/Encomendas/Index.cshtml *@
@{
    Layout = "_LayoutAdmin";
    ViewData["Title"] = "Gestão de Encomendas"; // Definido no controller, mas pode ser aqui também
}
@Html.AntiForgeryToken() @* Essencial para o JavaScript enviar com as requisições POST seguras *@

@section Styles {
    <style>
        thead th {
            color: black;
        }

        .estado-select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            min-width: 150px; /* Aumentado */
            font-size: 0.875rem;
        }

        .delete-checkbox {
            display: none;
            margin-right: 5px;
            vertical-align: middle;
        }

        .content .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

            .content .header h2 {
                margin: 0;
                font-size: 1.8em;
            }

        .action-buttons .delete-btn, .action-buttons .edit-btn {
            padding: 8px 12px;
            margin-left: 5px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .action-buttons .delete-btn {
            background-color: #dc3545;
        }
        /* Vermelho */
        .action-buttons .edit-btn {
            background-color: #6c757d;
        }
        /* Cinza para Cancelar */
        .action-buttons .delete-btn:disabled {
            background-color: #f8d7da;
            color: #58151c;
            cursor: not-allowed;
        }


        .search-bar {
            margin-bottom: 20px;
            margin-top: 15px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        .form-control-sm {
            padding: .35rem .6rem;
            font-size: .875rem;
            border-radius: .25rem;
            border: 1px solid #ced4da;
        }

        .filter-btn {
            padding: 7px 12px;
            font-size: 0.9rem;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .filter-btn.apply {
                background-color: #0d6efd;
            }

            .filter-btn.clear {
                background-color: #6c757d;
            }

        #nenhuma-encomenda {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }

        .table-container {
            margin-top: 10px;
        }
    </style>
}

<div class="content">
    <div class="header">
        <h2>@ViewData["Title"]</h2>
        <div class="action-buttons">
            <button id="btn-ativar-excluir-encomendas" class="delete-btn" onclick="ativarModoExclusaoEncomendas()">Excluir</button>
            <button id="btn-confirmar-excluir-encomendas" class="delete-btn" onclick="excluirEncomendasSelecionadas()" style="display:none;">Confirmar Exclusão</button>
            <button id="btn-cancelar-excluir-encomendas" class="edit-btn" onclick="cancelarModoExclusaoEncomendas()" style="display:none;">Cancelar</button>
        </div>
    </div>

    <div class="search-bar">
        <input type="text" id="filtro-cliente-encomenda" placeholder="Pesquisar por cliente/obra" class="form-control-sm">
        <input type="date" id="filtro-data-encomenda" class="form-control-sm">
        <select id="filtro-estado-encomenda" class="form-control-sm">
            <option value="">Todos os Estados</option>
            <option value="Pendente">Pendente</option>
            <option value="Em Processamento">Em Processamento</option>
            <option value="Pronta para Envio">Pronta para Envio</option>
            <option value="Enviada">Enviada</option>
            <option value="Entregue">Entregue</option>
            <option value="Cancelada">Cancelada</option>
        </select>
        <button class="filter-btn apply" onclick="aplicarFiltrosEncomendas()">Filtrar</button>
        <button class="filter-btn clear" onclick="limparFiltrosEncomendas()">Limpar</button>
    </div>

    <div class="table-container">
        <table id="tabela-encomendas" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th style="width:30px;"><input type="checkbox" id="selecionar-todas-encomendas" class="delete-checkbox" onchange="toggleSelecionarTodasEncomendas(this)"></th>
                    <th>Cliente</th>
                    <th>Data</th>
                    <th>Obra/Descrição</th>
                    <th>Itens Resumidos</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @* Linhas da tabela serão preenchidas por JavaScript *@
            </tbody>
        </table>
        <div id="nenhuma-encomenda">
            Nenhuma encomenda encontrada para os filtros aplicados.
        </div>
    </div>
</div>

@section Scripts {
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.2/xlsx.full.min.js"></script> *@
    <script>
        // URLs da API para Encomendas
        const API_URL_ENCOMENDAS_LISTAR = '@Url.Action("ListarEncomendasApi", "Encomendas")';
        const API_URL_ENCOMENDAS_EXCLUIR = '@Url.Action("ExcluirEncomendasApi", "Encomendas")';
        const API_URL_ENCOMENDAS_MUDAR_ESTADO = '@Url.Action("MudarEstadoEncomendaApi", "Encomendas")';

        const estadosEncomenda = ["Pendente", "Em Processamento", "Pronta para Envio", "Enviada", "Entregue", "Cancelada"];
        let todasAsEncomendasCarregadas = [];
        let antiForgeryTokenValue = ''; // Para armazenar o token

        document.addEventListener('DOMContentLoaded', function () {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) {
                antiForgeryTokenValue = tokenInput.value;
            } else {
                console.warn("Token Antiforgery não encontrado na página. POSTs podem falhar.");
            }
            // Adicionar event listeners aos botões de filtro
            document.querySelector('.filter-btn.apply').addEventListener('click', aplicarFiltrosEncomendas);
            document.querySelector('.filter-btn.clear').addEventListener('click', limparFiltrosEncomendas);

            carregarEncomendasDaApi();
        });

        function formatarDataEncomenda(dataISO) {
            if (!dataISO) return 'N/D';
            try {
                const data = new Date(dataISO);
                return data.toLocaleDateString('pt-PT', { day: '2-digit', month: '2-digit', year: 'numeric' });
            } catch (e) { return 'Data Inválida'; }
        }

        async function carregarEncomendasDaApi() {
            const tbody = document.getElementById('tabela-encomendas')?.querySelector('tbody');
            const divNenhuma = document.getElementById('nenhuma-encomenda');
            if (!tbody || !divNenhuma) return;

            tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;">A carregar encomendas...</td></tr>';
            divNenhuma.style.display = 'none';

            const filtroCliente = document.getElementById('filtro-cliente-encomenda').value;
            const filtroData = document.getElementById('filtro-data-encomenda').value;
            const filtroEstado = document.getElementById('filtro-estado-encomenda').value;

            let url = new URL(API_URL_ENCOMENDAS_LISTAR, window.location.origin);
            if(filtroCliente) url.searchParams.append('filtroClienteObra', filtroCliente);
            if(filtroData) url.searchParams.append('filtroData', filtroData);
            if(filtroEstado) url.searchParams.append('filtroEstado', filtroEstado);

            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
                todasAsEncomendasCarregadas = await response.json();
                renderizarTabelaEncomendas(todasAsEncomendasCarregadas);
            } catch (error) {
                console.error('Erro ao carregar encomendas:', error);
                tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; color:red;">Erro: ${error.message}</td></tr>`;
            }
        }

        function renderizarTabelaEncomendas(encomendas) {
            const tbody = document.getElementById('tabela-encomendas').querySelector('tbody');
            const divNenhuma = document.getElementById('nenhuma-encomenda');
            tbody.innerHTML = '';

            if (encomendas.length === 0) {
                divNenhuma.style.display = 'block';
            } else {
                divNenhuma.style.display = 'none';
                encomendas.forEach(enc => {
                    const tr = tbody.insertRow();
                    tr.dataset.encomendaId = enc.encomendaId;

                    tr.insertCell().innerHTML = `<input type="checkbox" class="delete-checkbox-row delete-checkbox" value="${enc.encomendaId}" onchange="verificarSelecaoParaExcluirEncomendas()">`;
                    tr.insertCell().textContent = enc.nomeCliente || 'N/D';
                    tr.insertCell().textContent = formatarDataEncomenda(enc.dataEncomenda);
                    tr.insertCell().textContent = enc.nomeObra || 'N/D'; // Vem da API
                    tr.insertCell().textContent = enc.descricao || 'N/D'; // Vem da API

                    const estadoCell = tr.insertCell();
                    const selectEstado = document.createElement('select');
                    selectEstado.classList.add('estado-select', 'form-control-sm');
                    selectEstado.dataset.encomendaId = enc.encomendaId;
                    selectEstado.dataset.estadoOriginal = enc.estado; // Armazena o estado original

                    estadosEncomenda.forEach(estado => {
                        const option = document.createElement('option');
                        option.value = estado; option.textContent = estado;
                        if (enc.estado === estado) option.selected = true;
                        selectEstado.appendChild(option);
                    });
                    selectEstado.addEventListener('change', function() {
                        mudarEstadoEncomenda(this.dataset.encomendaId, this.value, this);
                    });
                    estadoCell.appendChild(selectEstado);
                });
            }
            atualizarVisibilidadeCheckboxesEncomendas();
        }

        function aplicarFiltrosEncomendas() { carregarEncomendasDaApi(); }
        function limparFiltrosEncomendas() {
            document.getElementById('filtro-cliente-encomenda').value = '';
            document.getElementById('filtro-data-encomenda').value = '';
            document.getElementById('filtro-estado-encomenda').value = '';
            carregarEncomendasDaApi();
        }

        // Funções de Exclusão (ativarModoExclusaoEncomendas, cancelarModoExclusaoEncomendas, etc.)
        // ADAPTADAS da sua versão anterior de encomendas.js
        function ativarModoExclusaoEncomendas() {
            document.querySelectorAll('#tabela-encomendas .delete-checkbox').forEach(cb => cb.style.display = 'inline-block');
            document.getElementById('btn-ativar-excluir-encomendas').style.display = 'none';
            document.getElementById('btn-confirmar-excluir-encomendas').style.display = 'inline-block';
            document.getElementById('btn-cancelar-excluir-encomendas').style.display = 'inline-block';
            document.getElementById('btn-confirmar-excluir-encomendas').disabled = true;
            document.getElementById('selecionar-todas-encomendas').style.display = 'inline-block';
        }
        function cancelarModoExclusaoEncomendas() {
            document.querySelectorAll('#tabela-encomendas .delete-checkbox').forEach(cb => { cb.style.display = 'none'; cb.checked = false; });
            document.getElementById('btn-ativar-excluir-encomendas').style.display = 'inline-block';
            document.getElementById('btn-confirmar-excluir-encomendas').style.display = 'none';
            document.getElementById('btn-cancelar-excluir-encomendas').style.display = 'none';
            document.getElementById('selecionar-todas-encomendas').checked = false;
            document.getElementById('selecionar-todas-encomendas').style.display = 'none';
        }
        function toggleSelecionarTodasEncomendas(selectAllCheckbox) {
            document.querySelectorAll('#tabela-encomendas .delete-checkbox-row').forEach(cb => { cb.checked = selectAllCheckbox.checked; });
            verificarSelecaoParaExcluirEncomendas();
        }
        function verificarSelecaoParaExcluirEncomendas() {
            const algumSelecionado = Array.from(document.querySelectorAll('#tabela-encomendas .delete-checkbox-row:checked')).length > 0;
            document.getElementById('btn-confirmar-excluir-encomendas').disabled = !algumSelecionado;
            const todasLinhas = document.querySelectorAll('#tabela-encomendas tbody .delete-checkbox-row');
            if (todasLinhas.length > 0) {
                 document.getElementById('selecionar-todas-encomendas').checked = Array.from(todasLinhas).every(cb => cb.checked);
            } else {
                 document.getElementById('selecionar-todas-encomendas').checked = false;
            }
        }
        async function excluirEncomendasSelecionadas() {
            const checkboxes = document.querySelectorAll('#tabela-encomendas .delete-checkbox-row:checked');
            const ids = Array.from(checkboxes).map(cb => parseInt(cb.value));
            if (ids.length === 0 || !confirm(`Excluir ${ids.length} encomenda(s)?`)) return;
            try {
                const headers = { 'Content-Type': 'application/json' };
                if (antiForgeryTokenValue) headers['RequestVerificationToken'] = antiForgeryTokenValue;
                const response = await fetch(API_URL_ENCOMENDAS_EXCLUIR, { method: 'POST', headers: headers, body: JSON.stringify(ids) });
                if (response.ok) {
                    alert('Excluído com sucesso!'); carregarEncomendasDaApi(); cancelarModoExclusaoEncomendas();
                } else { const err = await response.json().catch(()=>({message: response.statusText})); alert(`Erro: ${err.message}`); }
            } catch (e) { console.error(e); alert('Erro de comunicação.'); }
        }
        async function mudarEstadoEncomenda(encomendaId, novoEstado, selectElement) {
            const estadoOriginal = selectElement.dataset.estadoOriginal; // Pega o estado original que foi salvo no select
            if (!confirm(`Mudar estado da encomenda ID ${encomendaId} para "${novoEstado}"?`)) {
                selectElement.value = estadoOriginal; // Reverte a seleção no dropdown se o usuário cancelar
                return;
            }
            try {
                const headers = { 'Content-Type': 'application/json' };
                if (antiForgeryTokenValue) headers['RequestVerificationToken'] = antiForgeryTokenValue;

                const response = await fetch(API_URL_ENCOMENDAS_MUDAR_ESTADO, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify({ Id: parseInt(encomendaId), NovoEstado: novoEstado })
                });
                if (response.ok) {
                    alert(`Estado alterado para "${novoEstado}"!`);
                    selectElement.dataset.estadoOriginal = novoEstado; // Atualiza o estado original no select
                    // Atualizar no array local
                    const idx = todasAsEncomendasCarregadas.findIndex(e => e.encomendaId == encomendaId);
                    if (idx > -1) todasAsEncomendasCarregadas[idx].estado = novoEstado;
                } else {
                    const err = await response.json().catch(()=>({message: response.statusText}));
                    alert(`Erro ao mudar estado: ${err.message}`);
                    selectElement.value = estadoOriginal; // Reverte no erro
                }
            } catch (e) { console.error(e); alert('Erro de comunicação.'); selectElement.value = estadoOriginal; } // Reverte no erro
        }
        function atualizarVisibilidadeCheckboxesEncomendas(){
            const emModoExclusao = document.getElementById('btn-confirmar-excluir-encomendas')?.style.display !== 'none';
            document.querySelectorAll('#tabela-encomendas .delete-checkbox-row').forEach(cb => {
                cb.style.display = emModoExclusao ? 'inline-block' : 'none';
            });
            document.getElementById('selecionar-todas-encomendas').style.display = emModoExclusao ? 'inline-block' : 'none';
            if(emModoExclusao) verificarSelecaoParaExcluirEncomendas();
        }
    </script>
}